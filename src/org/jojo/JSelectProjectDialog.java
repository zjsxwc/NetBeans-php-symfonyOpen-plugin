package org.jojo;

import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.DefaultListModel;
import org.jojo.helper.ProjectHelper;
import org.jojo.search.SearchData;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.ui.OpenProjects;
import org.openide.util.Exceptions;

public class JSelectProjectDialog extends JDialog {

    /** Creates new form JSelectProjectDialog */
    public JSelectProjectDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        addCustomListeners();
        setDefaultListCellRenderer(jProjectsList);
        moveToCenterOfScreen();
        loadProjects();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProjectsPane = new javax.swing.JScrollPane();
        jProjectsList = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(JSelectProjectDialog.class, "JSelectProjectDialog.title")); // NOI18N

        jProjectsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jProjectsList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jProjectsListKeyPressed(evt);
            }
        });
        jProjectsPane.setViewportView(jProjectsList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jProjectsPane, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jProjectsPane, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jProjectsListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jProjectsListKeyPressed
    switch (evt.getKeyCode()) {
        case KeyEvent.VK_ENTER:
            openSelectedProject();
            break;
        case KeyEvent.VK_ESCAPE:
            close();
            break;
        case KeyEvent.VK_UP:
            if (jProjectsList.getSelectedIndex() == 0) {
                jProjectsList.setSelectedIndex(jProjectsList.getModel().getSize() - 1);
                evt.consume();
            }
            break;
        case KeyEvent.VK_DOWN:
            if (jProjectsList.getSelectedIndex() == (jProjectsList.getModel().getSize() - 1)) {
                jProjectsList.setSelectedIndex(0);
                evt.consume();
            }
            break;
    }
}//GEN-LAST:event_jProjectsListKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JSelectProjectDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JSelectProjectDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JSelectProjectDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JSelectProjectDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                JSelectProjectDialog dialog = new JSelectProjectDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jProjectsList;
    private javax.swing.JScrollPane jProjectsPane;
    // End of variables declaration//GEN-END:variables

    private void addCustomListeners() {
        jProjectsList.addMouseListener(new MouseListener() {

            @Override
            public void mouseClicked(MouseEvent me) {
                if (me.getClickCount() == 2) {
                    openSelectedProject();
                }
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
            }

            @Override
            public void mouseExited(MouseEvent me) {
            }
        });
    }

    private void loadProjects() {
        try {
            Project openProjects[] = OpenProjects.getDefault().openProjects().get();
            ArrayList<String> projectList = new ArrayList<String>();
            DefaultListModel listModel = new DefaultListModel();
            String mainProjectName = ProjectHelper.getProjectName(OpenProjects.getDefault().getMainProject());

            for (int i = 0; i < openProjects.length; i++) {
                projectList.add(ProjectHelper.getProjectName(openProjects[i]));
            }
            Collections.sort(projectList);
            for (int i = 0; i < projectList.size(); i++) {
                listModel.addElement(projectList.get(i));
            }
            jProjectsList.setModel(listModel);
            if (mainProjectName != null) {
                jProjectsList.setSelectedIndex(listModel.indexOf(mainProjectName));
            }
        } catch (Exception exception) {
            Exceptions.printStackTrace(exception);
        }

    }

    private void openSelectedProject() {
        try {
            String projectName = jProjectsList.getSelectedValue().toString();
            Project openProjects[] = OpenProjects.getDefault().openProjects().get();
            for (int i = 0; i < openProjects.length; i++) {
                Project project = openProjects[i];
                if (ProjectHelper.getProjectName(project).equals(projectName)) {
                    OpenProjects.getDefault().setMainProject(project);
                    SearchData.getInstance().setSourceFolders(ProjectHelper.getSourceFolders(project));
                    break;
                }
            }
        } catch (Exception exception) {
            Exceptions.printStackTrace(exception);
        } finally {
            close();
        }
    }
}
